<div class="eigen-playlist-slider">
    {% for like in likes %}
        <ul class="playlist-items">
            <li>
                
                {% comment %} <img src="https://fdnd-agency.directus.app/assets/{{ playlist.image | default: 'assets/img/default-foto.jpg' }}?width=112&height=95">             {% endcomment %}

                <img src="assets/img/default-foto.jpg">                
                <h3>{{ like.title }}</h2>

                <div class="items-btn">
                    <button class="play-btn">
                    <svg width="11" height="12" viewBox="0 0 11 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M10.0874 7.06141C10.7817 6.52417 10.7817 5.47595 10.0874 4.93871C7.98914 3.31514 5.6461 2.03543 3.14602 1.14749L2.68929 0.985277C1.8155 0.674939 0.892544 1.26613 0.774251 2.16812C0.443739 4.68826 0.443739 7.31186 0.774251 9.83201C0.892543 10.734 1.8155 11.3252 2.68929 11.0148L3.14602 10.8526C5.6461 9.96469 7.98914 8.68498 10.0874 7.06141Z" fill="white"/>
                    </svg>
                    </button>
                    <p>31 min. 55 sec</p>
                   
                    <form action="/like" method="POST"data-enhanced="form-{{ id }}">
                        <input type="hidden" name="playlist" value="{{ like.id }}">
                        <input type="hidden" name="profile" value="123">    
                        <button type="submit">
                            <svg width="18" height="15" viewBox="0 0 18 15" fill="none" xmlns="http://www.w3.org/2000/svg" class="liked-svg">
                                <path d="M8.65358 2.15238C8.8471 2.33832 9.1529 2.33832 9.34642 2.15238C10.1829 1.34871 11.326 0.75 12.6 0.75C15.1489 0.75 17.25 2.64769 17.25 5.0298C17.25 6.72608 16.4577 8.18092 15.348 9.42804C14.2397 10.6736 12.7972 11.7316 11.4588 12.6376L9.14014 14.207C9.0555 14.2643 8.9445 14.2643 8.85986 14.207L6.54125 12.6376C5.20278 11.7316 3.76035 10.6736 2.65201 9.42804C1.54225 8.18092 0.75 6.72608 0.75 5.0298C0.75 2.64769 2.85106 0.75 5.4 0.75C6.67403 0.75 7.81714 1.34871 8.65358 2.15238Z" stroke="#C4C4C4" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                        </button>
                    </form>
                    
                </div>
            </li>
        </ul>
    {% endfor %}
</div>
<script type="module">
// We maken hieronder aannames over wat de browser ondersteunt
// Dus laten we deze eerst testen met Feature Detection
// https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Testing/Feature_detection
if ('fetch' in window && 'DOMParser' in window) {

  // Als er ergens op de pagina een formulier wordt gesubmit..
  // (We maken hier gebruik van Event Delegation)
  document.addEventListener('submit', async function(event) {

    // Hou in een variabele bij welk formulier dat was
    const form = event.target

    // Als dit formulier geen data-enhanced attribuut heeft, doe dan niks
    // Dit doen we, zodat we sommige formulieren op de pagina kunnen 'enhancen'
    // Data attributen mag je zelf verzinnen; dit is dus niet iets speciaals
    // https://developer.mozilla.org/en-US/docs/Learn_web_development/Howto/Solve_HTML_problems/Use_data_attributes
    if (!form.hasAttribute('data-enhanced')) {
      return
    }

    // Voorkom de standaard submit van de browser
    // Let op: hiermee overschrijven we de default Loading state van de browser...
    event.preventDefault()

    // Doe een fetch naar de server, net als hoe de browser dit normaal zou doen
    // Gebruik daarvoor het action en method attribuut van het originele formulier
    // Inclusief alle formulierelementen
    const response = await fetch(form.action, {
      method: form.method,
      body: new URLSearchParams(new FormData(form))
    })

    // De server redirect op de normale manier, en geeft HTML terug
    // (De server weet niet eens dat deze fetch via client-side JavaScript gebeurde)
    const responseText = await response.text()

    // Normaal zou de browser die HTML parsen en weergeven, maar daar moeten we nu zelf iets mee
    // Parse de nieuwe HTML en maak hiervan een nieuw Document Object Model in het geheugen
    const parser = new DOMParser()
    const responseDOM = parser.parseFromString(responseText, 'text/html')

    // Zoek in die nieuwe DOM onze nieuwe state op, die we via Liquid hebben klaargemaakt
    // We gebruiken hiervoor het data-enhanced attribuut, zodat we weten waar we naar moeten zoeken
    // (Hierdoor kunnen we ook meerdere formulieren op dezelfde pagina gebruiken)
    const newState = responseDOM.querySelector('[data-enhanced="' + form.getAttribute('data-enhanced') + '"]')

    // Overschrijf ons formulier met de nieuwe HTML
    // Hier wil je waarschijnlijk de Loading state vervangen door een Success state
    form.outerHTML = newState.outerHTML

  })
}
</script>